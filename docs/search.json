{
  "articles": [
    {
      "path": "404.html",
      "title": "404 Error",
      "author": [],
      "contents": "\r\nYou may have reached this page in error. Please return to the home page, or open an issue on our GitHub repository.\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:04-07:00"
    },
    {
      "path": "abeta-extraction.html",
      "title": "Plaque Annotation",
      "description": "This ImageJ script extracts the ABETA channel from multi-channel TIFF images and assigns each image a random alphanumeric code for blinded plaque annotation.\n",
      "author": [],
      "contents": "\r\nThis script is written in the ImageJ Macro Language (IJM).\r\nmacro \"ABETA Channel Extraction\" {\r\n\r\n    setBatchMode(true);\r\n\r\n    input = getDirectory(\"Choose input data folder.\");\r\n    files = getFileList(input);\r\n    // Array.show(files);\r\n\r\n    dir = \"<insert your directory here>\";\r\n    datadir = dir + \"Data/2 - Channel Extraction/Plaque/\";\r\n\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  FUNCTION FOR RANDOM ID\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    function randomString(length, chars) {\r\n        result = \"\";\r\n        for (i = 0; i < length; i++) {\r\n            maxlen = lengthOf(chars)-1;\r\n            rand = round(random * maxlen);\r\n            result +=  substring(chars, rand, rand+1);\r\n        }\r\n        return result;\r\n    }\r\n    \r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  ITERATE OVER IMAGES\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    for (f = 0; f < files.length; f++) {\r\n\r\n        open(input + files[f]);\r\n        Roi.remove; // remove active selection, if any\r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  LOAD IMAGE + DEFINE MARKERS\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        image = getTitle(); // get crop title\r\n        selectImage(image); // shift focus to the selected crop\r\n        filename = substring(image, 0, indexOf(image, \"_Reordered.tif\"));\r\n        \r\n        splitname = split(filename, \"_\");   \r\n        sample = splitname[0];\r\n        layer = splitname[1];\r\n        crop = splitname[2];\r\n        crop = substring(crop, 4);\r\n        \r\n        if (sample == \"1190\" || sample == \"1301\" || sample == \"1619\" || sample == \"2169\" || sample == \"2191\" || sample == \"2250\" || sample == \"2274\") {\r\n            condition = \"CTRL\";\r\n        } else {\r\n            condition = \"AD\";\r\n        }\r\n        \r\n        print(filename);\r\n\r\n        ////////////////////////////////////////////////////////////\r\n        /////  RANDOMIZE CROP\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        id = randomString(6, \"0123456789abcdefghijklmnopqrstuvwxyz\");\r\n        // print(id);\r\n\r\n        Table.set(\"ID\", f, id);\r\n        Table.set(\"Sample\", f, sample);\r\n        Table.set(\"Layer\", f, layer);\r\n        Table.set(\"Crop\", f, crop);\r\n        Table.set(\"Condition\", f, condition);\r\n        Table.set(\"File\", f, filename);\r\n        Table.update();\r\n        \r\n        ////////////////////////////////////////////////////////////\r\n        /////  SAVE ABETA CHANNEL\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        // duplicate ABETA channel\r\n        selectImage(image); // shift focus to original\r\n        run(\"Duplicate...\", \"title=ABETA duplicate channels=16\");\r\n        \r\n        selectWindow(\"ABETA\"); // shift focus to original\r\n        saveAs(\"Png\", datadir + condition + \"/\" + id + \".png\");\r\n        close();\r\n\r\n        selectImage(image);\r\n        close();\r\n    \r\n    }\r\n\r\n    // save table with mappings\r\n    Table.save(datadir + \"ID Mappings.csv\")\r\n\r\n}\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:06-07:00"
    },
    {
      "path": "aldh1l1-extraction.html",
      "title": "Astrocyte Annotation",
      "description": "This ImageJ script extracts the ALDH1L1 channel from multi-channel TIFF images and assigns each image a random alphanumeric code for blinded astrocyte annotation.\n",
      "author": [],
      "contents": "\r\nThis script is written in the ImageJ Macro Language (IJM).\r\nmacro \"ALDH1L1 Channel Extraction\" {\r\n\r\n    setBatchMode(true);\r\n\r\n    input = getDirectory(\"Choose input data folder.\");\r\n    files = getFileList(input);\r\n    // Array.show(files);\r\n\r\n    dir = \"<insert your directory here>\";\r\n    datadir = dir + \"Data/2 - Channel Extraction/Astrocyte/\";\r\n\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  FUNCTION FOR RANDOM ID\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    function randomString(length, chars) {\r\n        result = \"\";\r\n        for (i = 0; i < length; i++) {\r\n            maxlen = lengthOf(chars)-1;\r\n            rand = round(random * maxlen);\r\n            result +=  substring(chars, rand, rand+1);\r\n        }\r\n        return result;\r\n    }\r\n\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  ITERATE OVER IMAGES\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    for (f = 0; f < files.length; f++) {\r\n\r\n        open(input + files[f]);\r\n        Roi.remove; // remove active selection, if any\r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  LOAD IMAGE + DEFINE MARKERS\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        image = getTitle(); // get crop title\r\n        selectImage(image); // shift focus to the selected crop\r\n        filename = substring(image, 0, indexOf(image, \"_Reordered.tif\"));\r\n        \r\n        splitname = split(filename, \"_\");   \r\n        sample = splitname[0];\r\n        layer = splitname[1];\r\n        crop = splitname[2];\r\n        crop = substring(crop, 4);\r\n        \r\n        if (sample == \"1190\" || sample == \"1301\" || sample == \"1619\" || sample == \"2169\" || sample == \"2191\" || sample == \"2250\" || sample == \"2274\") {\r\n            condition = \"CTRL\";\r\n        } else {\r\n            condition = \"AD\";\r\n        }\r\n        \r\n        print(filename);\r\n\r\n        ////////////////////////////////////////////////////////////\r\n        /////  RANDOMIZE CROP\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        id = randomString(6, \"0123456789abcdefghijklmnopqrstuvwxyz\");\r\n        // print(id);\r\n\r\n        Table.set(\"ID\", f, id);\r\n        Table.set(\"Sample\", f, sample);\r\n        Table.set(\"Layer\", f, layer);\r\n        Table.set(\"Crop\", f, crop);\r\n        Table.set(\"Condition\", f, condition);\r\n        Table.set(\"File\", f, filename);\r\n        Table.update();\r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  SAVE ALDH1L1 CHANNEL\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        // duplicate ALDH1L1 channel\r\n        selectImage(image); // shift focus to original\r\n        run(\"Duplicate...\", \"title=ALDH1L1 duplicate channels=2\");\r\n\r\n        run(\"Enhance Contrast...\", \"saturated=0.1\"); // only for visualization purposes\r\n        \r\n        selectWindow(\"ALDH1L1\"); // shift focus to original\r\n        saveAs(\"Png\", datadir + condition + \"/\" + id + \".png\");\r\n        close();\r\n\r\n        selectImage(image);\r\n        close();\r\n    \r\n    }\r\n\r\n    // save table with mappings\r\n    Table.save(datadir + \"ID Mappings.csv\")\r\n\r\n}\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:08-07:00"
    },
    {
      "path": "iba1-extraction.html",
      "title": "Microglia Annotation",
      "description": "This ImageJ script extracts the IBA1 channel from multi-channel TIFF images and assigns each image a random alphanumeric code for blinded microglia annotation.\n",
      "author": [],
      "contents": "\r\nThis script is written in the ImageJ Macro Language (IJM).\r\nmacro \"IBA1 Channel Extraction\" {\r\n\r\n    setBatchMode(true);\r\n\r\n    input = getDirectory(\"Choose input data folder.\");\r\n    files = getFileList(input);\r\n    // Array.show(files);\r\n\r\n    dir = \"C:/Users/ayush/Dropbox (Partners HealthCare)/Single-Cell Multiplex IHC/Multiplex IHC Project/Multiplex IHC (GitLab)/\";\r\n    datadir = dir + \"Data/2 - Channel Extraction/Microglia/\";\r\n\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  FUNCTION FOR RANDOM ID\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    function randomString(length, chars) {\r\n        result = \"\";\r\n        for (i = 0; i < length; i++) {\r\n            maxlen = lengthOf(chars)-1;\r\n            rand = round(random * maxlen);\r\n            result +=  substring(chars, rand, rand+1);\r\n        }\r\n        return result;\r\n    }\r\n    \r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  ITERATE OVER IMAGES\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    for (f = 0; f < files.length; f++) {\r\n\r\n        open(input + files[f]);\r\n        Roi.remove; // remove active selection, if any\r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  LOAD IMAGE + DEFINE MARKERS\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        image = getTitle(); // get crop title\r\n        selectImage(image); // shift focus to the selected crop\r\n        filename = substring(image, 0, indexOf(image, \"_Reordered.tif\"));\r\n        \r\n        splitname = split(filename, \"_\");   \r\n        sample = splitname[0];\r\n        layer = splitname[1];\r\n        crop = splitname[2];\r\n        crop = substring(crop, 4);\r\n        \r\n        if (sample == \"1190\" || sample == \"1301\" || sample == \"1619\" || sample == \"2169\" || sample == \"2191\" || sample == \"2250\" || sample == \"2274\") {\r\n            condition = \"CTRL\";\r\n        } else {\r\n            condition = \"AD\";\r\n        }\r\n        \r\n        print(filename);\r\n\r\n        ////////////////////////////////////////////////////////////\r\n        /////  RANDOMIZE CROP\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        id = randomString(6, \"0123456789abcdefghijklmnopqrstuvwxyz\");\r\n        // print(id);\r\n\r\n        Table.set(\"ID\", f, id);\r\n        Table.set(\"Sample\", f, sample);\r\n        Table.set(\"Layer\", f, layer);\r\n        Table.set(\"Crop\", f, crop);\r\n        Table.set(\"Condition\", f, condition);\r\n        Table.set(\"File\", f, filename);\r\n        Table.update();\r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  SAVE IBA1 CHANNEL\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        // duplicate IBA1 channel\r\n        selectImage(image); // shift focus to original\r\n        run(\"Duplicate...\", \"title=IBA1 duplicate channels=3\");\r\n\r\n        run(\"Enhance Contrast...\", \"saturated=0.1\"); // only for visualization purposes\r\n        \r\n        selectWindow(\"IBA1\"); // shift focus to original\r\n        saveAs(\"Png\", datadir + condition + \"/\" + id + \".png\");\r\n        close();\r\n\r\n        selectImage(image);\r\n        close();\r\n    \r\n    }\r\n\r\n    // save table with mappings\r\n    Table.save(datadir + \"ID Mappings.csv\")\r\n\r\n}\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:09-07:00"
    },
    {
      "path": "index.html",
      "title": "About",
      "description": "We have developed a methodology of cyclic multiplex fluorescent immunohistochemistry on human postmortem brain sections followed by an image analysis and machine learning pipeline that enables a deep morphological characterization of astrocytes and microglia in the Alzheimer's brain.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nDependencies\r\nDocumentation\r\nCode Availability\r\n\r\nDependencies\r\nTo run our code, please install the following dependencies:\r\n\r\n\r\n\r\n\r\nAdditional required libraries are specified in each script. Image segmentation was performed with the FIJI distribution of the open-source Java-based image analysis program ImageJ.1,2 Convolutional neural networks (CNN) were constructed using the PyTorch open-source deep learning library in the Python programming language (version 3.8.5).3 Unless otherwise indicated, all other analyses were performed in the R programming language and statistical computing environment (version 4.1.0).\r\nDocumentation\r\nTo read our documented code, please visit www.serranopozolab.org/glia-ihc.\r\nCode Availability\r\nOur full codebase is available for download on GitHub.\r\n\r\n\r\n\r\n1. Schindelin, J. et al. Fiji: An Open-Source Platform for Biological-Image Analysis. Nature Methods 9, 676–682 (2012).\r\n\r\n\r\n2. Rueden, C. T. et al. ImageJ2: ImageJ for the next generation of scientific image data. BMC Bioinformatics 18, 529 (2017).\r\n\r\n\r\n3. Paszke, A. et al. PyTorch: An Imperative Style, High-Performance Deep Learning Library. in Advances in Neural Information Processing Systems 32 (eds. Wallach, H. et al.) 8024–8035 (Curran Associates, Inc., 2019).\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:14-07:00"
    },
    {
      "path": "parse-rois.html",
      "title": "Parse VIA ROIs",
      "description": "This R script parses manual astrocyte, microglia, plaque, and tangle annotations created using the VGG Image Annotator tool into an ImageJ-readable format.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nDependencies\r\nRead Mappings\r\nRead Annotations\r\nParse Annotations\r\nWrite VIA ROIs\r\n\r\nDependencies\r\nLoad requisite packages and define directories. Note that this script uses my personal utilities package brainstorm, which can be downloaded via devtools::install_github(\"ayushnoori/brainstorm\").\r\n\r\n\r\n# data manipulation\r\nlibrary(data.table)\r\nlibrary(purrr)\r\nlibrary(magrittr)\r\n\r\n# string manipulation\r\nlibrary(stringi)\r\n\r\n# utility functions\r\nlibrary(brainstorm)\r\n\r\n\r\n\r\nNote that directories are relative to the R project path.\r\n\r\n\r\n# set directories\r\nddir = file.path(\"Data\", \"2 - Channel Extraction\")\r\ndir2 = file.path(\"Results\", \"2 - ROI Annotations\")\r\ndir2.1 = file.path(dir2, \"2.1 - VIA Annotations\")\r\n\r\n\r\n\r\nRead Mappings\r\nRead mappings between true crop labels and random alphanumeric IDs generated by prior ImageJ script.\r\n\r\n\r\ncelltypes = c(\"Astrocyte\", \"Microglia\", \"Plaque\", \"Tangle\")\r\n\r\n# read astrocyte, microglia, and plaque mappings\r\nread_map = function(celltype) { return(fread(file.path(ddir, celltype, \"ID Mappings.csv\"))[, Type := celltype]) }\r\nIDmap = rbindlist(map(celltypes, ~read_map(.x)))[, V1 := NULL]\r\nsetnames(IDmap, \"Type\", \"Group\")\r\n\r\nshow_table(head(IDmap, 20))\r\n\r\n\r\n\r\nRead Annotations\r\nRead VGG Image Annotator (VIA) annotations from the output .csv files.\r\n\r\n\r\nflist = list.files(path = dir2.1, pattern = \"\\\\.csv$\")\r\n\r\n# function to read annotations\r\nread_annot = function(file) {\r\n  fread(file.path(dir2.1, file)) %>%\r\n    .[, c(\"Annotator\", \"Group\") := as.list(stri_split_fixed(file, \"_\", simplify = T)[1:2])] %>%\r\n    return()\r\n}\r\n\r\n# read annotations\r\nannot = rbindlist(map(flist, ~read_annot(.x)))\r\n\r\n# remove empty file labels and .png extension suffix\r\nannot = annot %>%\r\n  .[region_shape_attributes != \"{}\", ] %>%\r\n  .[, Filename := gsub(\".png\", \"\", filename)] %>%\r\n  .[, Annotator := factor(Annotator, levels = c(\"alberto\", \"ayush\", \"clara\"), labels = c(\"ASP\", \"AN\", \"CMC\"))] %>%\r\n  .[, Group := factor(Group, levels = c(\"astrocyte\", \"microglia\", \"plaque\", \"tangle\"), labels = celltypes)]\r\n\r\nshow_table(annot[sample(nrow(annot), 40), ])\r\n\r\n\r\n\r\nParse Annotations\r\nDefine function to parse VIA annotations into format readable by ImageJ. To conform with ImageJ naming conventions, the cell-type of each ROI is specified by Group, while the subtype (e.g., compact vs. diffuse or soma vs. process) is specified by type.\r\n\r\n\r\n# define function to parse label based on VIA output\r\nparse_label = function(label, grp = c(\"region\", \"region_shape\")) {\r\n  \r\n  label = label %>%\r\n    strsplit(., \",\", fixed = TRUE) %>% .[[1]] %>% # split by comma to separate vars\r\n    gsub(\"[{, }, \\\"]\", \"\", .) %>% # remove brackets and quotes \r\n    strsplit(., \":\")\r\n  \r\n  # extract second elements in list, then assign first elements as names\r\n  parsed = map(label, 2)\r\n  names(parsed) = map_chr(label, 1)\r\n  \r\n  # replace tangle annotation name\r\n  if(\"tangle\" %in% names(parsed)) { names(parsed) = \"type\"; parsed[[\"quality\"]] = \"none\" }\r\n\r\n  # return statement\r\n  if(grp == \"region\") return(parsed[c(\"type\", \"quality\")]) else return(parsed[c(\"x\", \"y\", \"width\", \"height\")])\r\n  \r\n}\r\n\r\n\r\n\r\nApply parse_label function to VIA annotations, and join with IDmap.\r\n\r\n\r\n# parse annotations\r\nannot = annot %>%\r\n  .[, c(\"Type\", \"Quality\") := map_dfr(region_attributes, ~parse_label(.x, \"region\"))] %>%\r\n  .[, c(\"X\", \"Y\", \"Width\", \"Height\") := map_dfr(region_shape_attributes, ~parse_label(.x, \"region_shape\"))] %>%\r\n  .[Type == \"vessel\", Group := \"Vessel\"] %>%\r\n  .[, filename := gsub(\".png\", \"\", filename)]\r\n\r\n# join with ID mapping information, consolidate microglia and plaque categories, order table\r\nIDmap[, Group := NULL]\r\ndat = merge(IDmap, annot, by.x = \"ID\", by.y = \"filename\", all.y = TRUE) %>%\r\n  .[, .(Sample, Layer, Crop, Condition, File, Group, X, Y, Width, Height, Type, Quality, Annotator)] %>% \r\n  .[order(Sample, Layer, Crop, Group, as.numeric(X)), ]\r\n\r\n# total ROI count\r\nsummary(factor(dat[, Group]))\r\nshow_table(dat[sample(nrow(dat), 40), ])\r\n\r\n\r\n\r\nWrite VIA ROIs\r\nWrite VIA ROIs to appropriate output.\r\n\r\n\r\n# remove prior output\r\nrmlist = list.files(path = dir2, pattern = \"\\\\.csv$\")\r\nfor (rm in rmlist){ file.remove(file.path(dir2, rm)) }\r\n\r\n# write file list\r\nfiles = unique(dat$File)\r\ncat(paste0(\"Annotated Crops: \", length(files), \"\\n\"))\r\nwrite(c(\"Annotated TIFFs\", files), file.path(dir2, \"Annotated TIFFs.txt\"))\r\n\r\n# save VIA annotations of each crop after ordering by Type, then X coord.\r\nwalk(files, ~fwrite(dat[File == .x, ], file.path(dir2, paste0(.x, \".csv\"))))\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:17-07:00"
    },
    {
      "path": "phf1-extraction.html",
      "title": "Tangle Annotation",
      "description": "This ImageJ script extracts the PHF1 and HuC/D channels from multi-channel TIFF images, merges both channels, and assigns each image a random alphanumeric code for blinded tangle annotation and classification as intraneuronal vs. extraneuronal.\n",
      "author": [],
      "contents": "\r\nThis script is written in the ImageJ Macro Language (IJM).\r\nmacro \"PHF1 Channel Extraction\" {\r\n\r\n    setBatchMode(true);\r\n\r\n    input = getDirectory(\"Choose input data folder.\");\r\n    files = getFileList(input);\r\n    // Array.show(files);\r\n\r\n    dir = \"<insert your directory here>\";\r\n    datadir = dir + \"Data/2 - Channel Extraction/Tangle/\";\r\n\r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  FUNCTION FOR RANDOM ID\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    function randomString(length, chars) {\r\n        result = \"\";\r\n        for (i = 0; i < length; i++) {\r\n            maxlen = lengthOf(chars)-1;\r\n            rand = round(random * maxlen);\r\n            result +=  substring(chars, rand, rand+1);\r\n        }\r\n        return result;\r\n    }\r\n    \r\n\r\n    ////////////////////////////////////////////////////////////\r\n    /////  ITERATE OVER IMAGES\r\n    ////////////////////////////////////////////////////////////\r\n    \r\n    for (f = 0; f < files.length; f++) {\r\n\r\n        open(input + files[f]);\r\n        Roi.remove; // remove active selection, if any\r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  LOAD IMAGE + DEFINE MARKERS\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        image = getTitle(); // get crop title\r\n        selectImage(image); // shift focus to the selected crop\r\n        filename = substring(image, 0, indexOf(image, \"_Reordered.tif\"));\r\n        \r\n        splitname = split(filename, \"_\");   \r\n        sample = splitname[0];\r\n        layer = splitname[1];\r\n        crop = splitname[2];\r\n        crop = substring(crop, 4);\r\n        \r\n        if (sample == \"1190\" || sample == \"1301\" || sample == \"1619\" || sample == \"2169\" || sample == \"2191\" || sample == \"2250\" || sample == \"2274\") {\r\n            condition = \"CTRL\";\r\n        } else {\r\n            condition = \"AD\";\r\n        }\r\n        \r\n        print(filename);\r\n\r\n        ////////////////////////////////////////////////////////////\r\n        /////  RANDOMIZE CROP\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        id = randomString(6, \"0123456789abcdefghijklmnopqrstuvwxyz\");\r\n        // print(id);\r\n\r\n        Table.set(\"ID\", f, id);\r\n        Table.set(\"Sample\", f, sample);\r\n        Table.set(\"Layer\", f, layer);\r\n        Table.set(\"Crop\", f, crop);\r\n        Table.set(\"Condition\", f, condition);\r\n        Table.set(\"File\", f, filename);\r\n        Table.update();\r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  SAVE PHF1 AND HUC/D CHANNELS\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        // duplicate PHF1 channel and merge with HuC/D\r\n        selectImage(image); // shift focus to original\r\n        run(\"Duplicate...\", \"title=PHF1 duplicate channels=17\");\r\n        selectImage(image);\r\n        run(\"Duplicate...\", \"title=DAPI duplicate channels=1\");\r\n\r\n        // merge channels\r\n        run(\"Merge Channels...\", \"c2=PHF1 c3=DAPI create\");\r\n        \r\n        selectWindow(\"Composite\"); // shift focus to original\r\n        saveAs(\"Png\", datadir + condition + \"/\" + id + \".png\");\r\n        close();\r\n\r\n        selectImage(image);\r\n        close();\r\n    \r\n    }\r\n\r\n    // save table with mappings\r\n    Table.save(datadir + \"ID Mappings.csv\")\r\n\r\n}\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:22-07:00"
    },
    {
      "path": "reorder-channels.html",
      "title": "Reorder Channels",
      "description": "This ImageJ script allows the user to reorder imaging channels as necessary to facilitate downstream analysis.\n",
      "author": [],
      "contents": "\r\nThis script is written in the ImageJ Macro Language (IJM).\r\nmacro \"Reorder Channels [r]\" {\r\n\r\n    // setBatchMode(true); // will bypass GUI!\r\n\r\n    dir = \"<insert your directory here>\";\r\n    output = dir + \"Converted TIFF Crops/Reordered Crops/\";\r\n\r\n    input = getDirectory(\"Choose input data folder.\");\r\n    files = getFileList(input);\r\n    Array.show(files);\r\n\r\n    \r\n    for (f = 0; f < files.length; f++) {\r\n\r\n        open(input + files[f]);\r\n        \r\n        ////////////////////////////////////////////////////////////\r\n        /////  LOAD IMAGE + DEFINE MARKERS\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        image = getTitle(); // get crop title\r\n        selectImage(image); // shift focus to the selected crop\r\n        filename = substring(image, 0, indexOf(image, \".tif\"));\r\n        \r\n        run(\"8-bit\"); // convert to 8-bit, note that will lose fluorescence granularity\r\n    \r\n        // create array to hold assigned slice names\r\n        titles = newArray(nSlices);\r\n        // list possible marker names\r\n        markerNames = newArray(\"GFAP\", \"DAPI\", \"MHC2\", \"TSPO\", \"EAAT2\", \"TMEM119\", \"CD68\", \"EAAT1\", \"ALDH1L1\", \"IBA1\", \"Vimentin\", \"Ferritin\", \"HuCD\", \"YKL40\", \"GS\", \"Abeta\", \"PHF1-tau\");\r\n        \r\n        for (i = 1; i <= nSlices; i++) {\r\n             \r\n            setSlice(i);\r\n            run(\"Enhance Contrast...\", \"saturated=0.3\"); // only for visualization purposes\r\n    \r\n            // call dialog box to assign marker name to selected slice\r\n            Dialog.create(\"Which Marker Is This?\");\r\n            Dialog.addChoice(\"Type:\", markerNames);\r\n            Dialog.show();\r\n            marker = Dialog.getChoice();\r\n    \r\n            // set slice name based on user choice\r\n            setMetadata(\"Label\", marker);\r\n            titles[i-1] = getInfo(\"slice.label\");\r\n            \r\n            markerNames = Array.deleteValue(markerNames, marker); // prevents the same marker from being assigned to multiple slices\r\n            \r\n        }   \r\n    \r\n        ////////////////////////////////////////////////////////////\r\n        /////  REORDER SLICES + DEFINE LUT\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        run(\"Stack to Images\"); // separate each slice\r\n    \r\n        // concatenate in right order - rearranges all slices\r\n        run(\"Concatenate...\", \" title=\" + image + \" open image1=DAPI image2=ALDH1L1 image3=IBA1 image4=GFAP image5=MHC2 image6=TSPO image7=EAAT2 image8=TMEM119 image9=CD68 image10=EAAT1 image11=Vimentin image12=Ferritin image13=YKL40 image14=GS image15=HuCD image16=Abeta image17=PHF1-tau\");\r\n    \r\n        // make composite image with color\r\n        run(\"Make Composite\", \"display=Color\");\r\n        \r\n        finalNames = newArray(\"DAPI\", \"ALDH1L1\", \"IBA1\", \"GFAP\", \"MHC2\", \"TSPO\", \"EAAT2\", \"TMEM119\", \"CD68\", \"EAAT1\", \"Vimentin\", \"Ferritin\", \"YKL40\", \"GS\", \"HuC/D\", \"Abeta\", \"PHF1-tau\");\r\n        colorList = newArray(\"Blue\", \"Red\", \"Green\", \"Magenta\", \"Cyan\", \"Yellow\", \"Grays\");\r\n                \r\n        for (k = 1; k <= nSlices; k++) {\r\n             \r\n            setSlice(k);\r\n            setMetadata(\"Label\", finalNames[k-1]); // set final name of slice\r\n    \r\n            run(colorList[(k-1) % colorList.length]); // apply distinct false color per slice\r\n            \r\n            // add more data pre-processing if desired!\r\n            \r\n        }\r\n        \r\n        saveAs(\"Tiff\", output + filename + \"_Reordered.tif\");\r\n        \r\n        close();\r\n\r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:24-07:00"
    },
    {
      "path": "roi-segmentation.html",
      "title": "ROI Segmentation",
      "description": "This ImageJ script segments the manually-defined ROIs from the multi-channel TIFFs.\n",
      "author": [],
      "contents": "\r\n\r\nContents\r\nSetup\r\nRetrieve TIFFs\r\nBackground Subtraction\r\nDefine Metadata\r\nCreate ROIs\r\nSave ROI Coordinates\r\nROI Segmentation\r\nSave Measurements\r\n\r\nSetup\r\nThis script is written in the ImageJ Macro Language (IJM). For readability, the single macro has been divided into several sections here. First, the requisite directories, cell-type groups, and measurements are defined.\r\nmacro \"ROI Segmentation [m]\" {\r\n\r\n    setBatchMode(true);\r\n\r\n    // define paths\r\n    dir = \"<insert your directory here>\";\r\n    dir2 = dir + \"Results/2 - ROI Annotations/\";\r\n    outdir = dir + \"Data/3 - ROIs/\";\r\n\r\n    getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);\r\n    MonthNames = newArray(\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\");\r\n    print(\"MULTIPLEX IHC ROI EXTRACTION\");\r\n    print(\"DATE: \" + MonthNames[month] + \". \" + dayOfMonth + \", \" + year);\r\n    print(\"START TIME: \" + hour + \":\" + minute + \":\" + second);\r\n    \r\n\r\n    // define cell-type groups\r\n    celldirs = newArray(\"Astrocyte ROIs/\", \"Microglia ROIs/\", \"Vessel ROIs/\", \"Plaque ROIs/\", \"Tangle ROIs/\");\r\n    Roi.setGroupNames(\"astrocyte,microglia,vessel,plaque,tangle\");\r\n\r\n    // get input directory for final TIFF crops\r\n    input = getDirectory(\"Choose input data folder with full TIFF crops.\");\r\n    // input = dir + \"Data/1 - Test Crops/\";\r\n    files = getFileList(input);\r\n    // Array.show(files);\r\n\r\n    // set measurements to be applied on ROIs\r\n    run(\"Set Measurements...\", \"area mean standard modal min centroid center perimeter bounding shape feret's integrated median skewness area_fraction stack display redirect=None decimal=3\"); \r\n    \r\n    // open list of TIFF files which have annotations\r\n    run(\"Table... \", \"open=[\" + dir2 + \"Annotated TIFFs.txt]\");\r\n    Table.rename(\"Annotated TIFFs.txt\", \"TIFFs\");\r\nRetrieve TIFFs\r\nNext, the list of annotated TIFF files is retrieved and iterated over.\r\n    ////////////////////////////////////////////////////////////\r\n    /////  GET TIFF LIST AND OPEN FILES\r\n    ////////////////////////////////////////////////////////////\r\n\r\n    tiffs = Table.getColumn(\"Annotated TIFFs\", \"TIFFs\");\r\n    selectWindow(\"TIFFs\");\r\n    run(\"Close\");\r\n    // Array.show(tiffs);\r\n\r\n    for (f = 0; f < tiffs.length; f++) {\r\n\r\n        fname = tiffs[f];\r\n        print(\"\"); // add new line\r\n        print(\"-------- \" + f+1 + \"/\" + tiffs.length + \": \" + fname + \" --------\");\r\n        \r\n        open(input + fname + \"_Reordered.tif\");\r\n        Roi.remove; // remove active selection, if any\r\n\r\n        image = getTitle(); // get crop title\r\n        selectImage(image); // shift focus to the selected crop\r\n\r\n        // normalize with rolling ball filter\r\n        run(\"Subtract Background...\", \"rolling=200 stack\");\r\nBackground Subtraction\r\nFor each TIFF file, rolling ball background subtraction is applied with a radius of 200 pixels.\r\n        // perform background subtraction with rolling ball filter\r\n        run(\"Subtract Background...\", \"rolling=200 stack\");\r\nDefine Metadata\r\nThe condition of each sample (i.e., CTRL or AD) is defined, and the pixel-to-micron resolution is extracted from the metadata.\r\n        ////////////////////////////////////////////////////////////\r\n        /////  CLASSIFY SAMPLE CONDITION\r\n        ////////////////////////////////////////////////////////////\r\n        \r\n        sample = split(fname, \"_\"); // sample condition classified again\r\n        sample = sample[0];\r\n        \r\n        if (sample == \"1190\" || sample == \"1301\" || sample == \"1619\" || sample == \"2169\" || sample == \"2191\" || sample == \"2250\" || sample == \"2274\") {\r\n            condition = \"CTRL\";\r\n        } else {\r\n            condition = \"AD\";\r\n        }\r\n        \r\n        // create output directory\r\n        output = outdir + condition + \"/\" + fname;\r\n        File.makeDirectory(output);\r\n\r\n        // print condition\r\n        print(\"Condition: \" + condition);\r\n\r\n        // extract pixel to micron conversion which is preserved in TIFF metadata\r\n        info = getImageInfo();\r\n        res = substring(info, indexOf(info, \"X Resolution: \"), indexOf(info, \"Y Resolution: \"));\r\n        res = split(res, \" \");\r\n        res = res[2];\r\n        run(\"Set Scale...\", \"distance=\" + res + \" known=1 pixel=1.000 unit=micron\"); // set scale in pixels/micron\r\n\r\n        // print resolution\r\n        print(\"Resolution: \" + res + \" pixels per micron\");\r\n        File.saveString(res, output + \"/\" + fname + \"_Resolution.txt\") \r\nCreate ROIs\r\nROIs are created from the parsed VGG Image Annotator (VIA) annotations.\r\n        ////////////////////////////////////////////////////////////\r\n        /////  OPEN ROI LIST AND CREATE ROIS\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        // open parsed VIA annotations for this crop\r\n        run(\"Table... \", \"open=[\" + dir2 + fname + \".csv]\");\r\n        cname = fname + \" Coordinates\";\r\n        Table.rename(fname + \".csv\", cname);\r\n        selectWindow(cname);\r\n\r\n        // define ROI arrays from VIA annotations\r\n        X = Table.getColumn(\"X\", cname);\r\n        Y = Table.getColumn(\"Y\", cname);\r\n        width = Table.getColumn(\"Width\", cname);\r\n        height = Table.getColumn(\"Height\", cname);\r\n        group = Table.getColumn(\"Group\", cname);\r\n\r\n        // define property arrays from VIA annotations\r\n        type = Table.getColumn(\"Type\", cname);\r\n        quality = Table.getColumn(\"Quality\", cname);\r\n        annotator = Table.getColumn(\"Annotator\", cname);\r\n        \r\n        // shift focus to image\r\n        selectWindow(image);\r\n        // setSlice(2); // change slice to membrane marker\r\n\r\n        // set counter for astrocytes and vessels\r\n        a = 0; m = 0; v = 0; p = 0; t = 0;\r\n\r\n        // iterate over annotated regions to create ROIs\r\n        for (i = 0; i < X.length; i++) {\r\n\r\n            makeRectangle(X[i], Y[i], width[i], height[i]);\r\n            roiManager(\"add\");\r\n            roiManager(\"Select\", i);\r\n\r\n            if(group[i] == \"astrocyte\") {\r\n                Roi.setGroup(236);\r\n                Roi.setProperty(\"Type\", type[i]);\r\n                Roi.setProperty(\"Quality\", quality[i]);\r\n                Roi.setProperty(\"Annotator\", annotator[i]);\r\n                roiManager(\"update\");\r\n                a = a + 1; roiManager(\"rename\", \"Astrocyte\" + a);\r\n            }\r\n            \r\n            if(group[i] == \"microglia\") {\r\n                Roi.setGroup(227);\r\n                Roi.setProperty(\"Type\", type[i]);\r\n                Roi.setProperty(\"Quality\", quality[i]);\r\n                Roi.setProperty(\"Annotator\", annotator[i]);\r\n                roiManager(\"update\");\r\n                m = m + 1; roiManager(\"rename\", \"Microglia\" + m);\r\n            }\r\n            \r\n            if(group[i] == \"vessel\") {\r\n                Roi.setGroup(87);\r\n                Roi.setProperty(\"Type\", type[i]);\r\n                Roi.setProperty(\"Quality\", quality[i]);\r\n                Roi.setProperty(\"Annotator\", annotator[i]);\r\n                roiManager(\"update\");\r\n                v = v + 1; roiManager(\"rename\", \"Vessel\" + v);\r\n            }\r\n\r\n            if(group[i] == \"plaque\") {\r\n                Roi.setGroup(27);\r\n                Roi.setProperty(\"Type\", type[i]);\r\n                Roi.setProperty(\"Quality\", quality[i]);\r\n                Roi.setProperty(\"Annotator\", annotator[i]);\r\n                roiManager(\"update\");\r\n                p = p + 1; roiManager(\"rename\", \"Plaque\" + p);\r\n            }\r\n\r\n            if(group[i] == \"tangle\") {\r\n                Roi.setGroup(114);\r\n                Roi.setProperty(\"Type\", type[i]);\r\n                Roi.setProperty(\"Quality\", quality[i]);\r\n                Roi.setProperty(\"Annotator\", annotator[i]);\r\n                roiManager(\"update\");\r\n                t = t + 1; roiManager(\"rename\", \"Tangle\" + t);\r\n            }\r\n\r\n\r\n            \r\n        }\r\n\r\n        print(\"# of Astrocytes: \" + a);\r\n        print(\"# of Microglia: \" + m);\r\n        print(\"# of Vessels: \" + v);\r\n        print(\"# of Plaques: \" + p);\r\n        print(\"# of Tangles: \" + t);\r\nSave ROI Coordinates\r\nCoordinates of each ROI are saved.\r\n        ////////////////////////////////////////////////////////////\r\n        /////  SAVE ROI COORDINATES\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        // save ROI coordinates to compare with ABETA plaques\r\n        // these coordinates are relative to entire crop\r\n        // ROI extraction only saves coordinates relative to smaller VIA annotation\r\n        roiManager(\"List\");\r\n        rname = fname + \" ROIs\";\r\n        Table.rename(\"Overlay Elements of \" + image, rname);\r\n\r\n        // create empty arrays\r\n        nROI = roiManager(\"Count\");\r\n        property_type = newArray(nROI); \r\n        property_quality = newArray(nROI); \r\n        property_annotator = newArray(nROI);\r\n        \r\n        // get ROI properties\r\n        for (k = 0; k < nROI; k++) {\r\n            roiManager(\"Select\", k);\r\n            property_type[k] = Roi.getProperty(\"Type\");\r\n            property_quality[k] = Roi.getProperty(\"Quality\");\r\n            property_annotator[k] = Roi.getProperty(\"Annotator\");\r\n        }\r\n\r\n        // add to Table\r\n        Table.setColumn(\"Type\", property_type, rname);\r\n        Table.setColumn(\"Quality\", property_quality, rname);\r\n        Table.setColumn(\"Annotator\", property_annotator, rname);\r\n        \r\n        // save coordinates\r\n        selectWindow(rname);\r\n        saveAs(\"Results\", output + \"/\" + fname + \"_ROIs.csv\");\r\n\r\n        // wipe results\r\n        Table.reset(fname + \"_ROIs.csv\");\r\n        selectWindow(fname + \"_ROIs.csv\");\r\n        run(\"Close\");\r\nROI Segmentation\r\nFor each newly-created ROI, the sub-image is segmented from the TIFF file. After adaptive thresholding using Otsu’s method, the mean gray intensity (MGI) of each channel is measured. Finally, each ROI is interpolated to a 64 x 64 image as input to the convolutional neural network (CNN).\r\n        ////////////////////////////////////////////////////////////\r\n        /////  ROI SEGMENTATION\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        // create ROI directories\r\n        dirA = output + \"/\" + celldirs[0];\r\n        dirM = output + \"/\" + celldirs[1];\r\n        dirV = output + \"/\" + celldirs[2];\r\n        dirP = output + \"/\" + celldirs[3];\r\n        dirT = output + \"/\" + celldirs[4];\r\n        File.makeDirectory(dirA); File.makeDirectory(dirA + \"/ROIs\");\r\n        File.makeDirectory(dirM); File.makeDirectory(dirM + \"/ROIs\");\r\n        File.makeDirectory(dirV); File.makeDirectory(dirV + \"/ROIs\");\r\n        File.makeDirectory(dirP); File.makeDirectory(dirP + \"/ROIs\");\r\n        File.makeDirectory(dirT); File.makeDirectory(dirT + \"/ROIs\");\r\n\r\n        // get total number of ROIs\r\n        nROI = roiManager(\"Count\");\r\n\r\n        // show all ROIs\r\n        roiManager(\"show all with labels\");\r\n        a = 0; m = 0; v = 0; p = 0; t = 0;\r\n        mycounter = 0;\r\n        \r\n        \r\n        for (k = 0; k < nROI; k++) {\r\n            \r\n            // duplicate ROI\r\n            roiManager(\"Select\", k);\r\n            if (Roi.getGroup() == 236) { cellname = \"Astrocyte\"; celldir = dirA; a = a + 1; mycounter = a; }\r\n            if (Roi.getGroup() == 227) { cellname = \"Microglia\"; celldir = dirM; m = m + 1; mycounter = m; }\r\n            if (Roi.getGroup() == 87) { cellname = \"Vessel\"; celldir = dirV; v = v + 1; mycounter = v; }\r\n            if (Roi.getGroup() == 27) { cellname = \"Plaque\"; celldir = dirP; p = p + 1; mycounter = p; }\r\n            if (Roi.getGroup() == 114) { cellname = \"Tangle\"; celldir = dirT; t = t + 1; mycounter = t; }\r\n            ROIname = cellname + mycounter;\r\n            run(\"Duplicate...\", \"title=\" + ROIname + \" duplicate\");\r\n\r\n\r\n            ////////////////////////////////////////////////////////////\r\n            /////  CREATE INSIDE ROI AND REMOVE BACKGROUND\r\n            ////////////////////////////////////////////////////////////\r\n\r\n            if (cellname == \"Astrocyte\" || cellname == \"Vessel\") {\r\n                run(\"Duplicate...\", \"title=MarkerMask duplicate channels=2\"); // duplicate ALDH1L1  \r\n            }\r\n            else if (cellname == \"Microglia\") {\r\n                run(\"Duplicate...\", \"title=MarkerMask duplicate channels=3\"); // duplicate IBA1\r\n            } else if (cellname == \"Plaque\") {\r\n                run(\"Duplicate...\", \"title=MarkerMask duplicate channels=16\"); // duplicate ABETA\r\n            } else {\r\n                run(\"Duplicate...\", \"title=MarkerMask duplicate channels=17\"); // duplicate PHF1\r\n            }\r\n\r\n            // auto-threshold using Otsu method\r\n            run(\"Auto Threshold\", \"method=Otsu white\");\r\n            run(\"Analyze Particles...\", \"include add stack\");\r\n            selectWindow(\"MarkerMask\");\r\n            close();\r\n\r\n\r\n            // create array to select only new ROIs\r\n            selectWindow(ROIname);\r\n            oldROIs = Array.getSequence(nROI);\r\n            newROIs = Array.getSequence(roiManager(\"Count\"));\r\n\r\n            // ONLY if new ROIs have been added\r\n            if (roiManager(\"Count\") > nROI) {\r\n\r\n\r\n                // delete preexisting ROI indices from new ROI array \r\n                for (r = 0; r < oldROIs.length; r++) {\r\n                    newROIs = Array.deleteIndex(newROIs, 0);\r\n                }\r\n    \r\n                // combine multiple ROIs if more than one was created\r\n                if(newROIs.length > 1) {\r\n                    roiManager(\"select\", newROIs);\r\n                    roiManager(\"combine\");\r\n                    roiManager(\"add\");\r\n                    roiManager(\"select\", newROIs);\r\n                    roiManager(\"delete\");\r\n                }\r\n\r\n                        \r\n                // clear outside of ROI\r\n                roiManager(\"Select\", nROI);\r\n                roiManager(\"rename\", cellname + mycounter + \"_ROI\");\r\n                // setBackgroundColor(255, 255, 255);\r\n                setBackgroundColor(0, 0, 0);\r\n                run(\"Clear Outside\", \"stack\");\r\n\r\n\r\n\r\n                ////////////////////////////////////////////////////////////\r\n                /////  MEASURE AND SAVE ROI\r\n                ////////////////////////////////////////////////////////////\r\n\r\n                // measure each channel based on new ROI\r\n                for (s = 1; s <= nSlices; s++) {\r\n                    setSlice(s);\r\n                    run(\"Measure\");                                     \r\n                }\r\n                \r\n                // scale for CNN and save\r\n                run(\"Size...\", \"width=64 height=64 average interpolation=None\"); // no interpolation keeps edge of ROI sharp\r\n                saveAs(\"Tiff\", celldir + \"/\" + condition + \"_\" + fname + \"_\" + cellname + mycounter + \".tif\"); // save in crop specific folder\r\n    \r\n    \r\n                // save ROI\r\n                roiManager(\"Select\", nROI);\r\n                roiManager(\"save selected\", celldir + \"/ROIs/\" + condition + \"_\" + fname + \"_\" + cellname + mycounter + \".roi\")\r\n                roiManager(\"delete\");\r\n\r\n            } else { // if no ROI was created\r\n                print(\"ROI #\" + k + \" NOT CREATED: \" + cellname + \" \" + mycounter);\r\n            }\r\n\r\n            // close image window\r\n            close();\r\n            \r\n        }\r\nSave Measurements\r\nFor each TIFF image, the ROI measurements are saved and the image is closed.\r\n        ////////////////////////////////////////////////////////////\r\n        /////  SAVE AND CLOSE CROP\r\n        ////////////////////////////////////////////////////////////\r\n\r\n        // update ROI manager GUI for output\r\n        roiManager(\"show all with labels\");\r\n\r\n        // save results\r\n        saveAs(\"Results\", output + \"/\" + fname + \"_Measurements.csv\");\r\n\r\n        // save ROIs to ZIP file\r\n        roiManager(\"Save\", output + \"/\" + fname + \"_ROIs.zip\");\r\n        \r\n        // save original image\r\n        saveAs(\"Tiff\", output + \"/\" + fname + \"_Crop.tif\");\r\n\r\n        // clear all results\r\n        Table.reset(\"Results\");\r\n        roiManager(\"reset\");\r\n        \r\n        // close VIA annotations\r\n        selectWindow(cname);\r\n        run(\"Close\");\r\n\r\n        // close crop\r\n        selectWindow(fname + \"_Crop.tif\");\r\n        close();\r\n\r\n        \r\n    }\r\n\r\n    selectWindow(\"Results\");\r\n    run(\"Close\")\r\n\r\n    print(\"\"); // add new line\r\n    getDateAndTime(year, month, dayOfWeek, dayOfMonth, hour, minute, second, msec);\r\n    print(\"END TIME: \" + hour + \":\" + minute + \":\" + second);\r\n\r\n    selectWindow(\"Log\");\r\n    saveAs(\"text\", outdir + \"Log.txt\"); // save in crop specific folder\r\n\r\n}\r\n\r\n\r\n\r\n",
      "last_modified": "2021-07-10T15:00:27-07:00"
    }
  ],
  "collections": []
}
